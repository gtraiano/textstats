{"version":3,"sources":["utils/config.js","services/textAnalysis.js","components/LetterFrequencyTable.js","components/CharacterStats.js","components/TextStats.js","components/WordStats.js","utils/canvas.js","components/StatsCanvas.js","components/Overlay.js","components/charts/config.js","components/charts/DoughnutChart.js","components/charts/BarChart.js","components/charts/RadarChart.js","components/Charts.js","App.js","reportWebVitals.js","index.js"],"names":["backendUrl","process","config","exports","letterFrequenciesAnalysis","text","a","axios","post","routes","letterFreqs","response","data","wordFrequenciesAnalysis","wordFreqs","textStats","charNgramFrequencies","charNgramFreqs","n","m","wordNgramFrequencies","wordNgramFreqs","welcome","get","getRoutes","Object","entries","map","key","value","fromEntries","LetterFrequencyTable","show","results","style","showIndex","overflowX","className","index","absolute","relative","relativeWithWhiteSpace","toFixed","CharacterStats","overflow","colSpan","alphabetic","upperCase","lowerCase","total","digits","punctuationCount","whitespace","wordCount","TextStats","title","header","h","textDecorationStyle","fontWeight","href","target","rel","WordStats","longestLength","shortestLength","averageLength","prepareCanvas","canvas","width","getBoundingClientRect","height","textBoxDimensions","textMetrics","actualBoundingBoxRight","actualBoundingBoxLeft","actualBoundingBoxAscent","actualBoundingBoxDescent","withinCanvas","point","ctx","getContext","rect","isPointInPath","x","y","checkRectangleCollision","points","some","p","b","rectA","left","right","top","bottom","rectB","Math","max","min","rectanglesOverlappingArea","StatsCanvas","React","forwardRef","ref","dataset","containerStyle","canvasLabel","canvasLabelStyle","fontFamilies","children","useImperativeHandle","drawCanvas","canvasRef","useRef","terms","current","length","t","maxFontSize","round","term","minFontSize","forEach","fontSize","font","measureText","collision","inCanvas","random","push","fillText","useEffect","imageRendering","Overlay","openOverlay","hide","closeOverlay","overlayRef","useCallback","display","document","documentElement","error","console","log","closeOnEscKey","e","stopPropagation","tempRef","focus","addEventListener","removeEventListener","backdropFilter","tabIndex","position","type","onClick","event","preventDefault","padding","margin","color","textDecoration","options","maintainAspectRatio","aspectRatio","responsive","scales","beginAtZero","ticks","autoSkip","plugins","legend","labels","filter","weight","filler","propagate","interaction","intersect","DoughnutChart","chartRef","updateDataset","backgroundColors","values","datasets","label","backgroundColor","borderColor","borderWidth","updateOptions","chartTitle","chart","Chart","destroy","colors","isDatasetOk","id","chartId","BarChart","newOptions","indexAxis","undefined","verticalXAxisLabels","maxRotation","l","minRotation","labelOffset","RadarChart","Charts","charStats","graphColors","wordStats","isAnalysisReady","useState","charts","setCharts","selectedIndex","setSelectedIndex","chartStyle","keys","chars","letter","val","transform","words","Number","parseFloat","fill","border","borderRadius","onChange","flexDirection","flexWrap","alignItems","justifyContent","App","setText","setCharStats","setWordStats","setTextStats","charNgramStats","setCharNgramStats","wordNgramStats","setWordNgramStats","setGraphColors","letters","characters","word","ngram","showStat","setShowStat","setIsAnalysisReady","canvasDataset","setCanvasDataset","createRef","textAnalysis","then","localStorage","getItem","ceil","floor","punctuation","slice","w","setTimeout","setItem","analyze","getElementById","lfResponse","wfResponse","tsResponse","cngResponse","wngResponse","charCount","reduce","acc","cur","displayTable","name","ctrlKey","marginBottom","fontStyle","marginLeft","marginRight","marginTop","placeholder","rows","ngrams","scrollbarWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1c0c11c0.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst backendUrl = process.env.REACT_APP_BACKEND_URL\r\n\r\nlet config = {\r\n    backendUrl\r\n}\r\n\r\nexport const addConfigParam = (key, value) => {\r\n    config[key] = value\r\n}\r\n\r\nexport const getRoutes = async () => {\r\n    return (await axios.get(`${backendUrl}/routes`)).data\r\n}\r\n\r\nexport default config","import axios from 'axios'\r\nimport config from '../utils/config'\r\n\r\nconst letterFrequenciesAnalysis = async text => {\r\n    const response = await axios.post(config.routes.letterFreqs, { text })\r\n    return response.data\r\n}\r\n\r\nconst wordFrequenciesAnalysis = async text => {\r\n    const response = await axios.post(config.routes.wordFreqs, { text })\r\n    return response.data\r\n}\r\n\r\nconst textStats = async text => {\r\n    const response = await axios.post(config.routes.textStats, { text })\r\n    return response.data\r\n}\r\n\r\nconst charNgramFrequencies = async text => {\r\n    const response = await axios.post(config.routes.charNgramFreqs, { text, n: 2, m: 3 })\r\n    return response.data\r\n}\r\n\r\nconst wordNgramFrequencies = async text => {\r\n    const response = await axios.post(config.routes.wordNgramFreqs, { text, n: 2, m: 3 })\r\n    return response.data\r\n}\r\n\r\nconst welcome = async () => {\r\n    return (await axios.get(config.backendUrl)).data\r\n}\r\n\r\nexport const getRoutes = async () => {\r\n    return Object.fromEntries(\r\n        Object.entries(\r\n            (await axios.get(`${config.backendUrl}/routes`)).data\r\n        )\r\n        .map(([key, value]) => [key, `${config.backendUrl}${value}`])\r\n    )\r\n}\r\n\r\nconst exports = {\r\n    letterFrequenciesAnalysis,\r\n    wordFrequenciesAnalysis,\r\n    textStats,\r\n    charNgramFrequencies,\r\n    wordNgramFrequencies,\r\n    welcome,\r\n    getRoutes\r\n}\r\nexport default exports","import React from 'react'\r\nimport '../styles/ResultsTable.css'\r\n\r\nconst LetterFrequencyTable = ({ show, results, style, showIndex = false }) => {\r\n    if(!results || !show) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Letter occurences</h2>\r\n            <div\r\n                style={{ ...style, overflowX: 'auto' }}\r\n            >\r\n                <table className=\"results-table sticky-head\">\r\n                    <thead>\r\n                        <tr>\r\n                            {showIndex && <th>#</th>}\r\n                            <th>Letter</th>\r\n                            <th>absolute</th>\r\n                            <th>relative</th>\r\n                            <th>relative incl. whitespace</th>\r\n                            <th>percentage</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {Object.entries(results).map(([key, { absolute, relative, relativeWithWhiteSpace }], index) =>\r\n                            <tr key={key}>\r\n                                {showIndex && <td>{index+1}</td>}\r\n                                <td>{key}</td>\r\n                                <td>{absolute}</td>\r\n                                <td>{relative}</td>\r\n                                <td>{relativeWithWhiteSpace}</td>\r\n                                <td>{(relative*100).toFixed(2)}%</td>\r\n                            </tr>\r\n                        )}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LetterFrequencyTable","import React from 'react'\r\n\r\nconst CharacterStats = ({ show, data, style }) => {\r\n    if(!data || !show) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Character statistics</h2>\r\n            <div style={{ ...style, overflow: 'auto' }}>\r\n                <table className=\"results-table sticky-head\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th colSpan=\"3\">Character occurences</th>\r\n                        </tr>\r\n                        <tr className=\"secondary-head\">\r\n                            <th>Category</th>\r\n                            <th>Sub-category</th>\r\n                            <th>count</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>alphabetic</td>\r\n                            <td colSpan=\"2\"></td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td>upper case</td>\r\n                            <td>{data.alphabetic.upperCase}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td>lower case</td>\r\n                            <td>{data.alphabetic.lowerCase}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td>total</td>\r\n                            <td>{data.alphabetic.total}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>digits</td>\r\n                            <td></td>\r\n                            <td>{data.digits}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>punctuation</td>\r\n                            <td colSpan=\"2\"></td>\r\n                        </tr>\r\n                        {\r\n                            Object.entries(data.punctuationCount).map(([key, value]) => {\r\n                                return (\r\n                                    <tr key={key}>\r\n                                        <td></td>\r\n                                        <td>{key}</td>\r\n                                        <td>{value}</td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }\r\n                        <tr>\r\n                            <td>whitespace</td>\r\n                            <td></td>\r\n                            <td>{data.whitespace}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>word count</td>\r\n                            <td></td>\r\n                            <td>{data.wordCount}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                {/*\r\n                    Object.entries(data).map(([key, value]) => {\r\n                        return (\r\n                            value instanceof Object\r\n                            ? <span key={key}>{key}<br/>{Object.entries(value).map(([key, value]) => <span key={key}>{key}: {value}<br/></span>)}</span>\r\n                            : <span key={key}>{key}: {value}<br/></span>\r\n                        )\r\n                    })\r\n                */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterStats","import React from 'react'\r\n\r\nconst TextStats = ({ show, data, style, title=\"Text statistics\", header=['statistic', 'result'] }) => {\r\n    if(!data || !show) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>{title}</h2>\r\n            <div style={{ ...style, overflow: 'auto' }}>\r\n                <table className=\"results-table sticky-head\">\r\n                    <thead>\r\n                        <tr>\r\n                        {\r\n                            header.map(h => <th key={h}>{h}</th>)\r\n                        }\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            Object.entries(data).map(([key, value]) =>\r\n                                <tr key={key}>\r\n                                    <td>\r\n                                        {key !== 'index of coincidence'\r\n                                            ? key\r\n                                            : <>\r\n                                                {key}&nbsp;\r\n                                                <a style={{textDecorationStyle: 'double', fontWeight: 'lighter'}} href=\"https://pages.mtu.edu/~shene/NSF-4/Tutorial/VIG/Vig-IOC.html\" target=\"_blank\" rel=\"noreferrer\">\r\n                                                    ?\r\n                                                </a>\r\n                                            </>\r\n                                        }\r\n                                    </td>\r\n                                    <td>{value}</td>\r\n                                </tr>\r\n                            )\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextStats","import React from 'react'\r\n\r\nconst WordStats = ({ show, data, style, showIndex = true }) => {\r\n    if(!data || !show) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Word statistics</h2>\r\n            <div style={{ ...style, overflow: 'auto' }}>\r\n                <table className=\"results-table sticky-head\">\r\n                    <thead>\r\n                        <tr>\r\n                            {showIndex && <th>#</th>}\r\n                            <th>word</th>\r\n                            <th>absolute</th>\r\n                            <th>relative</th>\r\n                            <th>relative incl. whitespace</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            Object.entries(data.wordFreqs).map(([key, value], index) =>\r\n                                <tr key={key}>\r\n                                    {showIndex && <td>{index+1}</td>}\r\n                                    <td>{key}</td>\r\n                                    <td>{value.absolute}</td>\r\n                                    <td>{value.relative}</td>\r\n                                    <td>{value.relativeWithWhiteSpace}</td>\r\n                                </tr>\r\n                            )\r\n                        }\r\n                        <tr className=\"secondary-head\">\r\n                            <th colSpan={showIndex ? 5 : 4}>word length</th>\r\n                        </tr>\r\n                        <tr>\r\n                            {showIndex && <td></td>}\r\n                            <td>longest word length</td>\r\n                            <td>{data.longestLength}</td>\r\n                            <td colSpan=\"2\"></td>\r\n                        </tr>\r\n                        <tr>\r\n                            {showIndex && <td></td>}\r\n                            <td>shortest word length</td>\r\n                            <td>{data.shortestLength}</td>\r\n                            <td colSpan=\"2\"></td>\r\n                        </tr>\r\n                        <tr>\r\n                            {showIndex && <td></td>}\r\n                            <td>average word length</td>\r\n                            <td>{data.averageLength}</td>\r\n                            <td colSpan=\"2\"></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WordStats","export const prepareCanvas = (canvas) => {\r\n    if(!canvas) return\r\n    canvas.width = canvas.getBoundingClientRect().width\r\n    canvas.height = canvas.getBoundingClientRect().height\r\n    canvas.style.width = canvas.width + 'px'\r\n    canvas.style.height = canvas.height + 'px'\r\n}\r\n\r\nexport const textBoxDimensions = textMetrics => {\r\n    return {\r\n      width: textMetrics.actualBoundingBoxRight - textMetrics.actualBoundingBoxLeft,\r\n      height: textMetrics.actualBoundingBoxAscent + textMetrics.actualBoundingBoxDescent\r\n    }\r\n    \r\n}\r\n\r\n// check if rectangle a overlaps rectangle b\r\nexport const rectanglesOverlappingArea = (a, b) => {\r\n    //https://math.stackexchange.com/questions/99565/simplest-way-to-calculate-the-intersect-area-of-two-rectangles\r\n    const rectA = {\r\n        left: a.x + a.textMetrics.actualBoundingBoxLeft,\r\n        right: a.x + a.textMetrics.actualBoundingBoxRight,\r\n        top: a.y - a.textMetrics.actualBoundingBoxAscent,\r\n        bottom: a.y + a.textMetrics.actualBoundingBoxDescent\r\n    }\r\n\r\n    const rectB = {\r\n        left: b.x + b.textMetrics.actualBoundingBoxLeft,\r\n        right: b.x + b.textMetrics.actualBoundingBoxRight,\r\n        top: b.y - b.textMetrics.actualBoundingBoxAscent,\r\n        bottom: b.y + b.textMetrics.actualBoundingBoxDescent\r\n    }\r\n\r\n    const x_overlap = Math.max(0, Math.min(rectA.right, rectB.right) - Math.max(rectA.left, rectB.left))\r\n    const y_overlap = Math.max(0, Math.min(rectA.bottom, rectB.bottom) - Math.max(rectA.top, rectB.top))\r\n    const overlapArea = x_overlap * y_overlap\r\n    return overlapArea\r\n}\r\n\r\nexport const withinCanvas = (canvas, point) => {\r\n    let ctx = canvas.getContext('2d')\r\n    ctx.rect(0, 0, canvas.width, canvas.height)\r\n\r\n    return (\r\n        ctx.isPointInPath(point.x + point.textMetrics.actualBoundingBoxLeft, point.y) &&\r\n        ctx.isPointInPath(point.x + point.textMetrics.actualBoundingBoxRight, point.y) &&\r\n        ctx.isPointInPath(point.x, point.y + point.textMetrics.actualBoundingBoxDescent) &&\r\n        ctx.isPointInPath(point.x + point.textMetrics.actualBoundingBoxRight, point.y - point.textMetrics.actualBoundingBoxAscent)\r\n    )\r\n}\r\n\r\nexport const checkRectangleCollision = (a, points, ctx) => {      \r\n    return points.some(p => {\r\n        const cl = rectanglesOverlappingArea(a, p)\r\n        return cl !== 0\r\n    })\r\n}","import React, { useEffect, useRef } from 'react'\r\nimport { prepareCanvas, textBoxDimensions, checkRectangleCollision, withinCanvas } from '../utils/canvas'\r\n\r\nconst StatsCanvas = React.forwardRef((\r\n    { dataset, containerStyle, canvasLabel, canvasLabelStyle, fontFamilies, children },\r\n    ref\r\n) => {\r\n    React.useImperativeHandle(ref, () => {\r\n        return {\r\n          // expose method for drawing\r\n          drawCanvas: () => {\r\n              drawCanvas()\r\n          }\r\n        }\r\n    });\r\n    \r\n    const canvasRef = useRef()\r\n    const drawCanvas = (terms = dataset, canvas = canvasRef.current) => {\r\n        if(!terms || !terms.length || !canvas) return\r\n        \r\n        prepareCanvas(canvas)\r\n        let ctx = canvas.getContext('2d')\r\n    \r\n        const max = Math.max(...terms.map(t => t.value))\r\n        const min = Math.min(...terms.map(t => t.value))\r\n        //const maxFontSize = 60\r\n        const maxFontSize = Math.round((canvas.height/terms.length) + Math.max(...terms.map(t => t.term.length)))\r\n        const minFontSize = 8\r\n        const points = []\r\n    \r\n    \r\n        terms.forEach(({ term, value }, index) => {\r\n          let fontSize = Math.round(maxFontSize*(value-min + minFontSize)/(max-min + minFontSize))\r\n          //ctx.font = `${fs}px Ubuntu sans-serif`\r\n          ctx.font = `${fontSize}px ${fontFamilies[index % fontFamilies.length]}`\r\n          //ctx.font = `${index < terms.length/2 ? 'bold' : ''} ${fontSize}px ${fontFamilies[index % fontFamilies.length]}`\r\n          //let x = (value*Math.random() - 0 + fs*key.length)/(canvas.width)*canvas.width\r\n          //let y = (value*Math.random() - 0 + fs)/(canvas.height)*canvas.height\r\n          let textMetrics = ctx.measureText(term)\r\n    \r\n          let { width, height } = textBoxDimensions(textMetrics)\r\n          let x, y\r\n          //let x = Math.round(width + (Math.random()*canvas.width - 0)*(canvas.width-width/2 - width)/(canvas.width))\r\n          //let y = Math.round(height + (Math.random()*canvas.height - 0)*(canvas.height-height - height)/(canvas.height))\r\n          //let collision = checkCollision({ x, y, textMetrics }, points, ctx)\r\n          //let inCanvas = withinCanvas(canvas, { x, y, textMetrics })\r\n          let collision = false\r\n          let inCanvas = false\r\n    \r\n          while(!inCanvas || collision) {\r\n              x = Math.round(Math.random()*canvas.width * width) % (canvas.width)\r\n              y = Math.round(Math.random()*canvas.height * height) % (canvas.height)\r\n              collision = checkRectangleCollision({x, y, textMetrics}, points, ctx)\r\n              inCanvas = withinCanvas(canvas, { x, y, textMetrics })\r\n          }\r\n          points.push({ x, y, textMetrics })\r\n\r\n          ctx.fillText(term, x, y)\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        //canvasRef.current && dataset && drawCanvas()\r\n        if(dataset && canvasRef && canvasRef.current) {\r\n            drawCanvas()\r\n        }//eslint-disable-next-line\r\n    }, [dataset])\r\n    \r\n    if(!dataset || !dataset.length)\r\n        return null\r\n    return (\r\n      <div style={containerStyle}>\r\n        <canvas ref={canvasRef} style={{ width: '100%', height: '100%', imageRendering: 'pixelated' }}></canvas>\r\n        {canvasLabel && <label style={canvasLabelStyle}>{canvasLabel}</label>}\r\n        <br/>\r\n        {children}\r\n      </div>\r\n    )\r\n})\r\n\r\nexport default StatsCanvas","import '../styles/Overlay.css'\r\nimport React, { useEffect, useCallback, useRef } from 'react';\r\n\r\nconst Overlay = React.forwardRef(({ children }, ref) => {\r\n    React.useImperativeHandle(ref, () => {\r\n        return {\r\n            // expose methods for showing/hiding overlay\r\n            show: () => {\r\n                openOverlay()\r\n            },\r\n            hide: () => {\r\n                closeOverlay()\r\n            }\r\n        }\r\n    })\r\n  \r\n    /*const style = {\r\n        position: 'fixed',\r\n        display: 'none',\r\n        width: '100%',\r\n        height: '100%',\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        backgroundColor: 'rgba(0,0,0,0.8)',\r\n        zIndex: 2,\r\n        overflow: 'hidden'\r\n    }*/\r\n    const overlayRef = useRef()\r\n\r\n    // overlay disappear\r\n    const closeOverlay = useCallback(() => {\r\n        try {\r\n            overlayRef.current.style.display = 'none'\r\n            document.documentElement.style.overflow = 'auto' // show browser scrollbars\r\n            \r\n        }\r\n        catch(error) {\r\n            console.log('error in closeOverlay()')\r\n            console.error(error)\r\n        }\r\n    }, [overlayRef])\r\n\r\n    // overlay appear\r\n    const openOverlay = useCallback(() => {\r\n        try {\r\n            document.documentElement.style.overflow = 'hidden' // hide browser scrollbars\r\n            overlayRef.current.style.display = 'block'\r\n        }\r\n        catch(error) {\r\n            console.log('error in openOverlay()')\r\n            console.error(error)\r\n        }\r\n    }, [overlayRef])\r\n\r\n    useEffect(() => {\r\n        const closeOnEscKey = e => {\r\n            e.stopPropagation()\r\n            if(e.key === 'Escape') {\r\n                closeOverlay()\r\n            }\r\n        }\r\n\r\n    if(overlayRef && overlayRef.current) {\r\n        const tempRef = overlayRef.current\r\n        overlayRef.current.focus()\r\n        overlayRef.current.addEventListener('keyup', closeOnEscKey)\r\n\r\n        // dismount cleanup\r\n        return () => {\r\n            tempRef.removeEventListener('keyup', closeOnEscKey)\r\n        }    \r\n    }\r\n    \r\n  }, [overlayRef, closeOverlay])\r\n  \r\n  return (\r\n  \t<div\r\n      style={{backdropFilter: 'blur(10px)'}}\r\n      className=\"overlay\"\r\n  \t  ref={overlayRef}\r\n      tabIndex=\"0\"\r\n  \t>\r\n  \t  {children}\r\n      {/* overlay close button */}\r\n      <div style={{ position: 'absolute', width: '100%', top: '90%' }} className=\"link-button-container\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={event => { event.preventDefault(); closeOverlay(); }}\r\n        >\r\n          close\r\n        </button>\r\n      </div>\r\n        \r\n      {/* overlay close (X) button */}\r\n      <button\r\n        className=\"link-button\"\r\n        onClick={event => { event.preventDefault(); closeOverlay(); }}\r\n        style={{ position: 'absolute', width: '2%', padding: 0, margin: 0, top: 0, left: '98%' }}\r\n      >\r\n        <a\r\n          href=\"#close\"\r\n          style={{ fontWeight: 800, fontSize: '150%', color: 'black', textDecoration: 'none' }}\r\n        >\r\n          x\r\n        </a>\r\n      </button>\r\n    </div>\r\n  )\r\n});\r\n\r\nexport default Overlay;","const barChart = {\r\n    type: \"bar\",\r\n    data: {},\r\n    options : {\r\n        maintainAspectRatio: false,\r\n        aspectRatio: 2,\r\n        responsive: true,\r\n        scales: {\r\n            y: {\r\n                beginAtZero: true,\r\n                ticks: {\r\n                    autoSkip: false\r\n                }\r\n            },\r\n            x: {\r\n                ticks: {\r\n                    autoSkip: false,\r\n                }\r\n            }\r\n        },\r\n        plugins: {\r\n            legend: {\r\n                labels: {\r\n                    filter: () => null\r\n                },\r\n                title: {\r\n                    display: true,\r\n                    text: '',\r\n                    font: {\r\n                        weight: 'bold'\r\n                    }\r\n                },\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst doughnutChart = {\r\n    type: 'doughnut',\r\n    data: {},\r\n    options: {\r\n        aspectRatio: 1,\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                display: false,\r\n                position: 'right'\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: '',\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst radarChart = {\r\n    type: \"radar\",\r\n    data: {},\r\n    options: {\r\n        aspectRatio: 1,\r\n        maintainAspectRatio: false,\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                display: true\r\n                //filter: () => null\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: '',\r\n            },\r\n            filler: {\r\n                propagate: false\r\n            },\r\n            'samples-filler-analyser': {\r\n                target: 'chart-analyser'\r\n            }\r\n        },\r\n        interaction: {\r\n            intersect: false\r\n        }\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n    barChart,\r\n    doughnutChart,\r\n    radarChart\r\n}","import React, { useEffect, useRef } from 'react'\r\nimport Chart from 'chart.js/auto'\r\nimport config from './config'\r\n\r\nconst DoughnutChart = ({ dataset, options, style, className }) => {\r\n    const canvasRef = useRef()\r\n    const chartRef = useRef()\r\n\r\n    const updateDataset = (dataset) => {\r\n        let backgroundColors = []\r\n        if(!dataset.backgroundColors || !dataset.backgroundColors.length) {\r\n            backgroundColors = dataset.values.map(() => `rgb(${Math.round(Math.random()*255)}, ${Math.round(Math.random()*255)}, ${Math.round(Math.random()*255)})`)\r\n        }\r\n        return {\r\n            labels: dataset.labels,\r\n            datasets: [\r\n                {\r\n                    label: dataset.label,\r\n                    data: dataset.values,\r\n                    backgroundColor: dataset.backgroundColors || backgroundColors,\r\n                    borderColor: dataset.backgroundColors || backgroundColors,\r\n                    borderWidth: 1\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    const updateOptions = (options) => {\r\n        return {\r\n            ...config.doughnutChart.options,\r\n            plugins: {\r\n                ...config.doughnutChart.options.plugins,\r\n                title: {\r\n                    ...config.doughnutChart.options.plugins.title,\r\n                    text: options.chartTitle || ''\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const isDatasetOk = (dataset) => {\r\n        const values = dataset && dataset.values\r\n        const colors = dataset && dataset.backgroundColors && dataset.values && dataset.backgroundColors.length === dataset.values.length\r\n        return values || colors\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(canvasRef && canvasRef.current) {\r\n            const chart = new Chart(canvasRef.current.getContext('2d'), {\r\n                ...config.doughnutChart,\r\n                data: updateDataset(dataset),\r\n                options: updateOptions(options)\r\n            })\r\n            chartRef.current = chart\r\n            return () => { chartRef.current.destroy() }\r\n        }\r\n    }, [dataset, options, canvasRef])\r\n\r\n    if(!isDatasetOk(dataset)) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div style={style} className={className}>\r\n          <canvas ref={canvasRef} id={dataset?.chartId} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DoughnutChart","import React, { useEffect, useRef } from 'react'\r\nimport Chart from 'chart.js/auto'\r\nimport config from './config'\r\n\r\nconst BarChart = ({ dataset, options, style, className }) => {\r\n    const canvasRef = useRef()\r\n    const chartRef = useRef()\r\n\r\n    const updateDataset = (dataset) => {\r\n        let backgroundColors = []\r\n        if(!dataset.backgroundColors || !dataset.backgroundColors.length) {\r\n            backgroundColors = dataset.values.map(() => `rgb(${Math.round(Math.random()*255)}, ${Math.round(Math.random()*255)}, ${Math.round(Math.random()*255)})`)\r\n        }\r\n\r\n        return {\r\n            labels: dataset.labels,\r\n            datasets: [\r\n                {\r\n                    label: dataset.label,\r\n                    data: dataset.values,\r\n                    backgroundColor: dataset.backgroundColors || backgroundColors,\r\n                    borderColor: dataset.backgroundColors || backgroundColors,\r\n                    borderWidth: 1\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    const updateOptions = (options) => {\r\n        const newOptions = { ...config.barChart.options }\r\n        newOptions.indexAxis = options.indexAxis || undefined\r\n        newOptions.plugins.legend.title.text = options.chartTitle\r\n        newOptions.scales.x.ticks = {\r\n            ...newOptions.scales.x.ticks,\r\n            ...options.verticalXAxisLabels && options.indexAxis && { indexAxis: options.indexAxis },\r\n            ...options.verticalXAxisLabels && options.indexAxis !== 'y' && {\r\n                ...{\r\n                    autoSkip: false,\r\n                    maxRotation: dataset.labels.some(l => l.length > 2) ? 90 : undefined,\r\n                    minRotation: dataset.labels.some(l => l.length > 2) ? 90 : undefined,\r\n                    labelOffset: dataset.labels.some(l => l.length > 2) ? -7 : undefined\r\n                }\r\n            }\r\n        }\r\n        return newOptions\r\n    }\r\n\r\n    const isDatasetOk = (dataset) => {\r\n        const values = dataset && dataset.values\r\n        const colors = dataset && dataset.backgroundColors && dataset.values && dataset.backgroundColors.length === dataset.values.length\r\n        return values || colors\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(canvasRef && canvasRef.current) {\r\n            chartRef.current = new Chart(canvasRef.current.getContext('2d'), {\r\n                ...config.barChart,\r\n                data: updateDataset(dataset),\r\n                options : updateOptions(options)\r\n            })\r\n            return () => { chartRef.current.destroy() }\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [dataset, options, canvasRef])\r\n\r\n    \r\n\r\n    if(!isDatasetOk(dataset)) {\r\n        return null\r\n    }\r\n    \r\n    return (\r\n        <div style={style} className={className}>\r\n            <canvas ref={canvasRef} id={options?.chartId}></canvas>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BarChart","import React, { useEffect, useRef } from 'react'\r\nimport Chart from 'chart.js/auto'\r\nimport config from './config'\r\n\r\nconst RadarChart = ({ dataset, options, style, className }) => {\r\n    const canvasRef = useRef()\r\n    const chartRef = useRef()\r\n\r\n    const updateDataset = (dataset) => {\r\n        return dataset\r\n    }\r\n\r\n    const updateOptions = (options) => {\r\n        const newOptions = { ...config.radarChart.options }\r\n        newOptions.plugins.title.text = options?.chartTitle || ''\r\n        return newOptions\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if(canvasRef && canvasRef.current) {\r\n            chartRef.current = new Chart(canvasRef.current.getContext('2d'), {\r\n                type: \"radar\",\r\n                data: updateDataset(dataset),\r\n                options: updateOptions(options)\r\n            });\r\n            return () => { chartRef.current.destroy() }\r\n        }\r\n      }, [dataset, options, canvasRef])\r\n\r\n    if(!dataset){\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div style={style} className={className}>\r\n          <canvas ref={canvasRef} id={options?.chartId} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RadarChart","import React, { useEffect, useState } from 'react'\r\nimport { BarChart, DoughnutChart, RadarChart } from './charts/'\r\n\r\nconst Charts = ({ charStats, graphColors, wordStats, isAnalysisReady }) => {\r\n    const [charts, setCharts] = useState([])\r\n    const [selectedIndex, setSelectedIndex] = useState(0)\r\n    const chartStyle = { width: '75%', height: '75%' }\r\n    \r\n    useEffect(() => {\r\n        if(isAnalysisReady && charStats && wordStats && graphColors) {\r\n            setCharts([\r\n                {\r\n                    title: 'Letter absolute frequency',\r\n                    chart: (\r\n                        <BarChart\r\n                            style={chartStyle}\r\n                            dataset={\r\n                            {\r\n                                \r\n                                labels: Object.keys(charStats.letterFreqs),\r\n                                values: Object.values(charStats.letterFreqs).map(({ absolute }) => absolute ),\r\n                                backgroundColors: graphColors.chars.letter\r\n                            }\r\n                            }\r\n                            options={{ chartTitle: 'Letter absolute frequency', chartId: 'letter_freqs_absolute' }}\r\n                        />\r\n                    )\r\n                },\r\n                {\r\n                    title: 'Letter relative frequency',\r\n                    chart: (\r\n                        <DoughnutChart \r\n                            style={chartStyle}\r\n                            dataset={\r\n                            {\r\n                                label: '% of occurences',\r\n                                labels: Object.keys(charStats.letterFreqs) || [],\r\n                                values: Object.values(charStats.letterFreqs).map(({ relative }) => (relative*100).toFixed(2) ) || null,\r\n                                backgroundColors: graphColors.chars.letter\r\n                            }\r\n                            }\r\n                            options={{ chartTitle: 'Letter relative frequency %', chartId: 'letter_freqs_relevant' }}\r\n                        />\r\n                    )\r\n                },\r\n                {\r\n                    title: 'Punctuation absolute frequency',\r\n                    chart: (\r\n                        <BarChart\r\n                            style={chartStyle}\r\n                            dataset={\r\n                            {\r\n                                labels: Object.keys(charStats?.punctuationCount) || [],\r\n                                values: Object.values(charStats?.punctuationCount).map(val => val) || null,\r\n                            }\r\n                            }\r\n                            options={{ chartTitle: 'Punctuation absolute frequency', chartId: 'letter_punctuation' }}\r\n                        />\r\n                  )\r\n                },\r\n                {\r\n                    title: 'Word absolute frequency',\r\n                    chart: (\r\n                        <BarChart\r\n                            style={\r\n                                Object.keys(wordStats.wordFreqs).length <= 35\r\n                                ? chartStyle\r\n                                : { ...chartStyle, height: `${100*Object.keys(wordStats.wordFreqs).length/35}%`, position: 'relative', transform: `translateY(${20+Object.keys(wordStats.wordFreqs).length/35}%)`}\r\n                            }\r\n                            dataset={\r\n                                {\r\n                                labels: Object.keys(wordStats?.wordFreqs) || [],\r\n                                values: Object.values(wordStats?.wordFreqs).map(({ absolute }) => absolute) || null,\r\n                                backgroundColors: graphColors.words\r\n                                }\r\n                            }\r\n                            options={{ chartTitle: 'Word absolute frequency', verticalXAxisLabels: true, indexAxis: 'y', chartId: 'word_freqs_absolute' }}\r\n                        />\r\n                    )\r\n                },\r\n                {\r\n                    title: 'Word relative frequency',\r\n                    chart: (\r\n                        <DoughnutChart\r\n                            style={chartStyle}\r\n                            dataset={\r\n                                {\r\n                                label: '% of occurences',\r\n                                labels: Object.keys(wordStats.wordFreqs),\r\n                                values: Object.values(wordStats.wordFreqs).map(({ relative }) => (relative*100).toFixed(2)),\r\n                                backgroundColors: graphColors.words\r\n                                }\r\n                            }\r\n                            options={{ chartTitle: 'Word relative frequency %', chartId: 'word_freqs_relative' }}\r\n                        />\r\n                    )\r\n                },\r\n                {\r\n                    title: 'Word frequency absolute vs. relative',\r\n                    chart: (\r\n                        <RadarChart\r\n                            style={chartStyle}\r\n                            dataset={\r\n                                {\r\n                                labels: Object.keys(wordStats?.wordFreqs) || [],\r\n                                datasets: [\r\n                                    {\r\n                                    label: 'relative %',\r\n                                    data: Object.values(wordStats?.wordFreqs).map(({ absolute, relative }) => 100*Number.parseFloat(relative)) || null,\r\n                                    backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n                                    borderColor: 'rgb(54, 162, 235)',\r\n                                    fill: true\r\n                                    },\r\n                                    {\r\n                                    label: 'absolute',\r\n                                    data: wordStats ? Object.values(wordStats.wordFreqs).map(({ absolute, relative }) => Number.parseFloat(absolute)) : null,\r\n                                    backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n                                    borderColor: 'rgb(255, 99, 132)',\r\n                                    fill: true\r\n                                    }\r\n                                ],\r\n                                \r\n                                }\r\n                            }\r\n                            options={{ chartId: 'radar_chart', chartTitle: 'Word frequency' }}\r\n                        />\r\n                    )\r\n                }\r\n            ])\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [charStats, graphColors, wordStats])\r\n\r\n    if(!isAnalysisReady || !charts || !charts.length) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ position: 'absolute', top: '0.25%', width: 'max-content', right: '2%' }}>\r\n                <select\r\n                    value={selectedIndex}\r\n                    style={{ padding: '5px', fontSize: 'medium', backgroundColor: 'transparent', border: '1px solid black', borderRadius: '4px' }}\r\n                    onChange={ e => setSelectedIndex(e.target.value)}\r\n                >\r\n                    {charts.map((chart,index) => <option key={index} value={index}>{chart.title}</option>)}\r\n                </select>\r\n            </div>\r\n            <div\r\n                style={{ height: '95vh', display: 'flex', flexDirection: 'row', flexWrap: 'nowrap', alignItems: 'center', justifyContent: 'center' }}\r\n            >\r\n                {charts[selectedIndex].chart}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Charts\r\n","import React, { useEffect, useState } from 'react'\nimport textAnalysis from './services/textAnalysis'\nimport LetterFrequencyTable from './components/LetterFrequencyTable'\nimport CharacterStats from './components/CharacterStats'\nimport TextStats from './components/TextStats'\nimport WordStats from './components/WordStats'\nimport StatsCanvas from './components/StatsCanvas'\nimport { addConfigParam } from './utils/config'\nimport Overlay from './components/Overlay'\nimport Charts from './components/Charts'\n\n\nimport './App.css'\n\nfunction App() {\n  const [text, setText] = useState('') // textarea\n  const [charStats, setCharStats] = useState(null)\n  const [wordStats, setWordStats] = useState(null)\n  const [textStats, setTextStats] = useState(null)\n  const [charNgramStats, setCharNgramStats] = useState(null)\n  const [wordNgramStats, setWordNgramStats] = useState(null)\n  const [graphColors, setGraphColors] = useState(null) // colors used for graphs ({ chars: { letter: [], punctuation: [] }, words: [] })\n  const [showStat, setShowStat] = useState({ letters: true, text: false, characters: false, word: false, ngram: false }) // display stats tables\n  const [isAnalysisReady, setIsAnalysisReady] = useState(false)\n  const [canvasDataset, setCanvasDataset] = useState({\n    n: 10,\n    label: '',\n    data: []\n  })\n  const canvasRef = React.createRef()\n  const overlayRef = React.createRef()\n  \n  useEffect(() => {\n    textAnalysis.welcome().then(data => console.log(data))\n    textAnalysis.getRoutes().then(data => {\n      addConfigParam('routes', data)\n    })\n    setText(localStorage.getItem('textarea-text') || '')\n  }, [])\n\n  useEffect(() => {\n    console.log('character stats', charStats)\n    console.log('word stats', wordStats)\n    console.log('text stats', textStats)\n    console.log('char ngram stats', charNgramStats)\n    if(isAnalysisReady) {\n      setGraphColors({\n        chars: {\n          letter: Object.keys(charStats.letterFreqs).map(() => `rgb(${Math.ceil(Math.random()*255)}, ${Math.floor(Math.random()*255)}, ${Math.ceil(Math.random()*255)})`),\n          punctuation: Object.keys(wordStats.wordFreqs).map(l => `rgb(${Math.ceil(Math.random()*255)}, ${Math.floor(Math.random()*255)}, ${Math.ceil(Math.random()*255)})`)\n        },\n        words: Object.keys(wordStats.wordFreqs).map(() => `rgb(${Math.ceil(Math.random()*255)}, ${Math.floor(Math.random()*255)}, ${Math.ceil(Math.random()*255)})`)\n      })\n      setCanvasDataset(\n        { ...canvasDataset,\n          label: `${canvasDataset.n} most frequent terms in text`,\n          data: Object.entries(wordStats.wordFreqs)\n            .slice(0, canvasDataset.n)\n            .map(w => ({ term: w[0], value: w[1].absolute }))\n        }\n        \n      )\n      setTimeout(() => canvasRef.current && canvasRef.current.drawCanvas(), 250)\n    }//eslint-disable-next-line\n  }, [isAnalysisReady])\n\n  useEffect(() => {\n    localStorage.setItem('textarea-text', text)\n  }, [text])\n\n  const analyze = async () => {\n    try {\n      setIsAnalysisReady(false)\n      \n      const text = document.getElementById('textarea').value\n      \n      const lfResponse = await textAnalysis.letterFrequenciesAnalysis(text)\n      const wfResponse = await textAnalysis.wordFrequenciesAnalysis(text)\n      const tsResponse = await textAnalysis.textStats(text)\n      const cngResponse = await textAnalysis.charNgramFrequencies(text)\n      const wngResponse = await textAnalysis.wordNgramFrequencies(text)\n      \n      setCharStats(lfResponse)\n      setWordStats(wfResponse)\n      setTextStats({\n        ...tsResponse,\n        'unique words': Object.keys(wfResponse.wordFreqs).length,\n        'unique words %': ((Object.keys(wfResponse.wordFreqs).length / tsResponse.words)*100).toFixed(2)+'%',\n        'length of shortest word': wfResponse.shortestLength,\n        'length of longest word': wfResponse.longestLength,\n        'average word length': wfResponse.averageLength.toFixed(2),\n        'index of coincidence': //https://pages.mtu.edu/~shene/NSF-4/Tutorial/VIG/Vig-IOC.html\n          (1 / ((lfResponse.charCount.total - lfResponse.charCount.whitespace) * (lfResponse.charCount.total - lfResponse.charCount.whitespace - 1 )))\n          * Object.values(lfResponse.letterFreqs).map(l => l.absolute * (l.absolute-1)).reduce((acc, cur) => acc + cur, 0)\n      })\n      setCharNgramStats(cngResponse)\n      setWordNgramStats(wngResponse)\n      \n      setIsAnalysisReady(true)\n    }\n    catch(error) {\n      setIsAnalysisReady(false)\n      \n      setCharStats(null)\n      setWordStats(null)\n      setTextStats(null)\n      setCharNgramStats(null)\n      setWordNgramStats(null)\n      setCanvasDataset(null)\n      \n      console.error(error)\n    }\n  }\n\n  const displayTable = (e, name) => {\n    if(name === 'all') {\n      setShowStat(Object.fromEntries(Object.keys(showStat).map((key) => [key, true])))\n    }\n    else {\n      if(!e.ctrlKey) {\n        setShowStat(Object.fromEntries(Object.entries(showStat).map(([key, value]) => [key, key === name ? true : false])))\n      }\n      else { // ctrl+click\n        setShowStat({\n          ...showStat,\n          [name]: !showStat[name]\n        })\n      }\n    }\n  }\n  \n  return (\n    <div className=\"App\">\n      <h1 style={{marginBottom: 0, padding: 0}}>Text Statistics</h1>\n      <StatsCanvas\n        ref={canvasRef}\n        dataset={canvasDataset?.data}\n        canvasRef={canvasRef.current}\n        canvasLabel={canvasDataset?.label}\n        canvasLabelStyle={{ fontStyle: 'italic', fontSize: '75%' }}\n        containerStyle={{ /*display: wordStats ? 'block' : 'none',*/ width: '50%', height: '25vh', marginLeft: 'auto', marginRight: 'auto', marginBottom: '2%' }}\n        fontFamilies={['Ubuntu sans-serif'/*, 'Segoe UI', 'Roboto', 'Courier New'*/]}\n      >\n        <button\n          onClick={() => canvasRef.current.drawCanvas()}\n          style={{ marginTop: '1%' }}\n        >\n          draw\n        </button>\n      </StatsCanvas>\n      <div className=\"textarea-container\">\n          <textarea id=\"textarea\" placeholder=\"Enter text for analysis\" rows=\"5\" value={text} onChange={e => setText(e.target.value)}/>\n          <br/>\n          <button type=\"submit\" onClick={async () => await analyze()}>analyze text</button>  \n      </div>\n      \n      <div className=\"results\">\n        <div\n          style={{\n            display: isAnalysisReady ? 'inline-block' : 'none',\n            width: '100%'\n          }}\n        >\n          <div\n            style={{\n              position: 'relative',\n              width: 'max-content',\n              left: '25%'\n            }}\n            title=\"crtl+click to select multiple categories\"\n          >\n            <button type=\"navigation\" className={showStat.letters ? 'active' : null} onClick={(e) => displayTable(e, 'letters')}>letters</button>\n            <button type=\"navigation\" className={showStat.characters ? 'active' : null} onClick={(e) => displayTable(e, 'characters')}>characters</button>\n            <button type=\"navigation\" className={showStat.word ? 'active' : null} onClick={(e) => displayTable(e, 'word')}>words</button>\n            <button type=\"navigation\" className={showStat.ngram ? 'active' : null} onClick={(e) => displayTable(e, 'ngram')}>n-grams</button>\n            <button type=\"navigation\" className={showStat.text ? 'active' : null} onClick={(e) => displayTable(e, 'text')}>text</button>\n            <button type=\"navigation\" className={Object.values(showStat).reduce((acc, cur) => acc && cur, true) ? 'active-all' : null} onClick={(e) => displayTable(e, 'all')}>all</button>\n          </div>\n        </div>\n\n        <LetterFrequencyTable\n          show={showStat.letters}\n          results={charStats?.letterFreqs}\n          style={{ height: '30vh', width: '50%', marginLeft: 'auto', marginRight: 'auto' }}\n        />\n        <CharacterStats\n          show={showStat.characters}\n          data={\n            charStats\n            ? { ...charStats?.charCount, wordCount: charStats?.wordCount, punctuationCount: charStats?.punctuationCount }\n            : null\n          }\n          style={{ height: '30vh', width: '50%', marginLeft: 'auto', marginRight: 'auto' }}\n        />\n        <WordStats\n          show={showStat.word}\n          data={wordStats}\n          style={{ height: '30vh', width: '50%', marginLeft: 'auto', marginRight: 'auto' }}\n        />\n        <TextStats\n          show={showStat.ngram}\n          data={charNgramStats?.ngrams}\n          header={['n-gram', 'frequency']}\n          title=\"Character n-gram occurences\"\n          style={{ height: '30vh', width: '50%', marginLeft: 'auto', marginRight: 'auto' }}\n        />\n        <TextStats\n          show={showStat.ngram}\n          data={wordNgramStats?.map(n => n.ngrams).reduce((acc, cur) => ({ ...acc, ...cur }), {})}\n          header={['n-gram', 'frequency']}\n          title=\"Word n-gram occurences\"\n          style={{ height: '30vh', width: '50%', marginLeft: 'auto', marginRight: 'auto' }}\n        />\n        <TextStats\n          show={showStat.text}\n          data={textStats}\n          style={{ height: '30vh', width: '50%', marginLeft: 'auto', marginRight: 'auto' }}\n        />\n        \n        {isAnalysisReady &&\n          <button\n            style={{ marginTop: '1%', marginBottom: '1%' }}\n            onClick={() => {overlayRef.current.show();}}\n          >\n            show graphs\n          </button>\n        }\n        <Overlay ref={overlayRef}>\n          <div style={{ height: 'inherit', overflow: 'auto', scrollbarWidth: 'thin', backgroundColor: 'rgba(255,255,255,0.9)' }}>\n            <Charts\n              isAnalysisReady={isAnalysisReady}\n              charStats={charStats}\n              graphColors={graphColors}\n              wordStats={wordStats}\n            />\n          </div>\n        </Overlay>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}